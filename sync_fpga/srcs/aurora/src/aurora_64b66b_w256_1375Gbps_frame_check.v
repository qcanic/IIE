 //////////////////////////////////////////////////////////////////////////////
 // Project:  Aurora 64B/66B
 // Company:  Xilinx
 //
 //
 //
 // (c) Copyright 2008 - 2009 Xilinx, Inc. All rights reserved.
 //
 // This file contains confidential and proprietary information
 // of Xilinx, Inc. and is protected under U.S. and
 // international copyright and other intellectual property
 // laws.
 //
 // DISCLAIMER
 // This disclaimer is not a license and does not grant any
 // rights to the materials distributed herewith. Except as
 // otherwise provided in a valid license issued to you by
 // Xilinx, and to the maximum extent permitted by applicable
 // law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
 // WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
 // AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
 // BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
 // INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
 // (2) Xilinx shall not be liable (whether in contract or tort,
 // including negligence, or under any other theory of
 // liability) for any loss or damage of any kind or nature
 // related to, arising under or in connection with these
 // materials, including for any direct, or any indirect,
 // special, incidental, or consequential loss or damage
 // (including loss of data, profits, goodwill, or any type of
 // loss or damage suffered as a result of any action brought
 // by a third party) even if such damage or loss was
 // reasonably foreseeable or Xilinx had been advised of the
 // possibility of the same.
 //
 // CRITICAL APPLICATIONS
 // Xilinx products are not designed or intended to be fail-
 // safe, or for use in any application requiring fail-safe
 // performance, such as life-support or safety devices or
 // systems, Class III medical devices, nuclear facilities,
 // applications related to the deployment of airbags, or any
 // other applications that could lead to death, personal
 // injury, or severe property or environmental damage
 // (individually and collectively, "Critical
 // Applications"). Customer assumes the sole risk and
 // liability of any use of Xilinx products in Critical
 // Applications, subject only to applicable laws and
 // regulations governing limitations on product liability.
 //
 // THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
 // PART OF THIS FILE AT ALL TIMES.
 
 //
 //////////////////////////////////////////////////////////////////////////////
 //
 //  FRAME CHECK
 //
 //
 //
 //  Description: This module is a  pattern checker to test the Aurora
 //               designs in hardware. The frames generated by FRAME_GEN
 //               pass through the Aurora channel and arrive at the frame checker 
 //               through the RX User interface. Every time an error is found in
 //               the data recieved, the error count is incremented until it 
 //               reaches its max value.
 //////////////////////////////////////////////////////////////////////////////
 
 `timescale 1 ns / 10 ps
 `define DLY #1
 
(* DowngradeIPIdentifiedWarnings="yes" *)
 module aurora_64b66b_w256_1375Gbps_FRAME_CHECK #
 (
     parameter            DATA_WIDTH         = 16, // DATA bus width
     parameter            STRB_WIDTH         = 2 // STROBE bus width
 )
 (
     // Aurora --> FIFO
    (*mark_debug = "true"*)input                        AXI4_S_IP_TX_TVALID,
    (*mark_debug = "true"*)input    [0:(DATA_WIDTH-1)]  AXI4_S_IP_TX_TDATA,
    output    [0:8-1]             DATA_ERR_COUNT, 
    input                         USER_CLK,       
    input                         INIT_RST,

    // FIFO --> Design
    output                        FIFO_EMPTY,
    input                         RD_CLK,
    input                         RD_EN,
    output                        RD_VALID,
    output  [DATA_WIDTH-1:0]      RD_DOUT,
    output                        rd_rst_busy
 );
(*mark_debug = "true"*)wire        full;
(*mark_debug = "true"*)wire        prog_full;
wire        wr_rst_busy;

(*mark_debug = "true"*)reg [31:0] gtx_tx_cnt;
always@(posedge USER_CLK) begin
    if (INIT_RST) begin
        gtx_tx_cnt <= 'h0;
    end else if (AXI4_S_IP_TX_TVALID) begin
        gtx_tx_cnt <= gtx_tx_cnt + 1'b1;
    end

end

FIFO_Builtin_ASYN_W256D512_F500E0_R200W215 rx_fifo (
  .srst       ( INIT_RST            ),          
  .wr_clk     ( USER_CLK            ),          
  .rd_clk     ( RD_CLK              ),            
  .din        ( AXI4_S_IP_TX_TDATA  ),  
  .wr_en      ( AXI4_S_IP_TX_TVALID ), 
  .rd_en      ( RD_EN               ),         
  .dout       ( RD_DOUT             ),       
  .full       ( full                ),             
  .prog_full  ( prog_full           ),             
  .empty      ( FIFO_EMPTY          ),    
  .valid      ( RD_VALID            ),      
  .wr_rst_busy( wr_rst_busy         ),
  .rd_rst_busy( rd_rst_busy         )
);

assign  DATA_ERR_COUNT =   0;
endmodule           
